openapi: 3.0.0
info:
  title: Stockfy
  description: Documentação
  version: 1.0.0
  contact:
    name: Nexa Connect
    email: suporte@nexaconnect.com.br

servers:
  - url: https://estoque.resetti.com.br/api
    description: Servidor de produção

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [ADMIN, USER]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Supplier:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        contact:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        categoryId:
          type: string
          format: uuid
        category:
          $ref: '#/components/schemas/Category'
        brand:
          type: string
        model:
          type: string
        code:
          type: string
        quantity:
          type: integer
          minimum: 0
        minStock:
          type: integer
          minimum: 0
        purchasePrice:
          type: number
          format: float
          minimum: 0
        salePrice:
          type: number
          format: float
          minimum: 0
        contractPrice:
          type: number
          format: float
          minimum: 0
        location:
          type: string
        capacity:
          type: string
        speed:
          type: string
        interface:
          type: string
        supplierId:
          type: string
          format: uuid
        supplier:
          $ref: '#/components/schemas/Supplier'
        imagePath:
          type: string
        stockStatus:
          type: string
          enum: [IN_STOCK, LOW_STOCK, OUT_OF_STOCK]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    StockMovement:
      type: object
      properties:
        id:
          type: string
          format: uuid
        itemId:
          type: string
          format: uuid
        type:
          type: string
          enum: [ADD, REMOVE, ADJUST]
        quantity:
          type: integer
        balanceAfter:
          type: integer
        reason:
          type: string
        timestamp:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
        user:
          $ref: '#/components/schemas/User'

    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'

    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        statusCode:
          type: integer

tags:
  - name: Autenticação
    description: Endpoints de autenticação e autorização
  - name: Usuários
    description: Endpoints de gerenciamento de usuários
  - name: Categorias
    description: Endpoints de gerenciamento de categorias
  - name: Fornecedores
    description: Endpoints de gerenciamento de fornecedores
  - name: Produtos
    description: Endpoints de gerenciamento de produtos

paths:
  /auth/login:
    post:
      summary: Realiza login do usuário
      tags: [Autenticação]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Erro no servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/validate:
    get:
      summary: Valida o token de autenticação
      tags: [Autenticação]
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token válido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Token inválido ou expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      summary: Lista todos os usuários
      tags: [Usuários]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Termo de busca
        - in: query
          name: role
          schema:
            type: string
            enum: [ADMIN, USER]
          description: Filtrar por papel do usuário
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filtrar por status ativo
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Quantidade de registros por página
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número da página para paginação
      responses:
        200:
          description: Lista de usuários retornada com sucesso
          headers:
            X-Total-Count:
              description: Total de usuários encontrados
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Não autorizado
        500:
          description: Erro no servidor

    post:
      summary: Cria um novo usuário
      tags: [Usuários]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - name
                - email
                - password
                - role
              properties:
                username:
                  type: string
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                role:
                  type: string
                  enum: [ADMIN, USER]
      responses:
        201:
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        409:
          description: Usuário já existe
        500:
          description: Erro no servidor

  /users/{id}:
    get:
      summary: Obtém detalhes de um usuário específico
      tags: [Usuários]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do usuário
      responses:
        200:
          description: Detalhes do usuário retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Não autorizado
        404:
          description: Usuário não encontrado
        500:
          description: Erro no servidor

    put:
      summary: Atualiza um usuário existente
      tags: [Usuários]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [ADMIN, USER]
                isActive:
                  type: boolean
      responses:
        200:
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        404:
          description: Usuário não encontrado
        500:
          description: Erro no servidor

    delete:
      summary: Remove um usuário
      tags: [Usuários]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do usuário
      responses:
        204:
          description: Usuário removido com sucesso
        401:
          description: Não autorizado
        404:
          description: Usuário não encontrado
        500:
          description: Erro no servidor

  /categories:
    get:
      summary: Lista todas as categorias
      tags: [Categorias]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Termo de busca
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filtrar por status ativo
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Quantidade de registros por página
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número da página para paginação
      responses:
        200:
          description: Lista de categorias retornada com sucesso
          headers:
            X-Total-Count:
              description: Total de categorias encontradas
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        401:
          description: Não autorizado
        500:
          description: Erro no servidor

    post:
      summary: Cria uma nova categoria
      tags: [Categorias]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        201:
          description: Categoria criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        409:
          description: Categoria já existe
        500:
          description: Erro no servidor

  /categories/{id}:
    get:
      summary: Obtém detalhes de uma categoria específica
      tags: [Categorias]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID da categoria
      responses:
        200:
          description: Detalhes da categoria retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        401:
          description: Não autorizado
        404:
          description: Categoria não encontrada
        500:
          description: Erro no servidor

    put:
      summary: Atualiza uma categoria existente
      tags: [Categorias]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID da categoria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                isActive:
                  type: boolean
      responses:
        200:
          description: Categoria atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        404:
          description: Categoria não encontrada
        500:
          description: Erro no servidor

    delete:
      summary: Remove uma categoria
      tags: [Categorias]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID da categoria
      responses:
        204:
          description: Categoria removida com sucesso
        401:
          description: Não autorizado
        404:
          description: Categoria não encontrada
        409:
          description: Categoria em uso, não pode ser removida
        500:
          description: Erro no servidor

  /suppliers:
    get:
      summary: Lista todos os fornecedores
      tags: [Fornecedores]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Termo de busca
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filtrar por status ativo
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Quantidade de registros por página
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número da página para paginação
      responses:
        200:
          description: Lista de fornecedores retornada com sucesso
          headers:
            X-Total-Count:
              description: Total de fornecedores encontrados
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Supplier'
        401:
          description: Não autorizado
        500:
          description: Erro no servidor

    post:
      summary: Cria um novo fornecedor
      tags: [Fornecedores]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - contact
              properties:
                name:
                  type: string
                contact:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                address:
                  type: string
      responses:
        201:
          description: Fornecedor criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        409:
          description: Fornecedor já existe
        500:
          description: Erro no servidor

  /suppliers/{id}:
    get:
      summary: Obtém detalhes de um fornecedor específico
      tags: [Fornecedores]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do fornecedor
      responses:
        200:
          description: Detalhes do fornecedor retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        401:
          description: Não autorizado
        404:
          description: Fornecedor não encontrado
        500:
          description: Erro no servidor

    put:
      summary: Atualiza um fornecedor existente
      tags: [Fornecedores]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do fornecedor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                contact:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                address:
                  type: string
                isActive:
                  type: boolean
      responses:
        200:
          description: Fornecedor atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Supplier'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        404:
          description: Fornecedor não encontrado
        500:
          description: Erro no servidor

    delete:
      summary: Remove um fornecedor
      tags: [Fornecedores]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do fornecedor
      responses:
        204:
          description: Fornecedor removido com sucesso
        401:
          description: Não autorizado
        404:
          description: Fornecedor não encontrado
        409:
          description: Fornecedor em uso, não pode ser removido
        500:
          description: Erro no servidor

  /items:
    get:
      summary: Lista todos os produtos
      tags: [Produtos]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Termo de busca
        - in: query
          name: categoryId
          schema:
            type: string
          description: ID da categoria para filtro
        - in: query
          name: lowStock
          schema:
            type: boolean
          description: Filtrar apenas itens com estoque baixo
        - in: query
          name: stockStatus
          schema:
            type: string
            enum: [IN_STOCK, LOW_STOCK, OUT_OF_STOCK]
          description: Filtrar por status de estoque
        - in: query
          name: limit
          schema:
            type: integer
            default: 100
          description: Quantidade de registros por página
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número da página para paginação
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [name, purchasePrice, salePrice, quantity, categoryId]
            default: name
          description: Campo para ordenação
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Direção da ordenação
      responses:
        200:
          description: Lista de produtos retornada com sucesso
          headers:
            X-Total-Count:
              description: Total de produtos encontrados
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        401:
          description: Não autorizado
        500:
          description: Erro no servidor

    post:
      summary: Cria um novo produto
      tags: [Produtos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - categoryId
              properties:
                name:
                  type: string
                description:
                  type: string
                categoryId:
                  type: string
                brand:
                  type: string
                model:
                  type: string
                code:
                  type: string
                quantity:
                  type: integer
                  default: 0
                  minimum: 0
                minStock:
                  type: integer
                  default: 0
                  minimum: 0
                purchasePrice:
                  type: number
                  format: float
                  minimum: 0
                salePrice:
                  type: number
                  format: float
                  minimum: 0
                contractPrice:
                  type: number
                  format: float
                  minimum: 0
                location:
                  type: string
                capacity:
                  type: string
                speed:
                  type: string
                interface:
                  type: string
                supplierId:
                  type: string
      responses:
        201:
          description: Produto criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        500:
          description: Erro no servidor

  /items/{id}:
    get:
      summary: Obtém detalhes de um produto específico
      tags: [Produtos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do produto
      responses:
        200:
          description: Detalhes do produto retornados com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        401:
          description: Não autorizado
        404:
          description: Produto não encontrado
        500:
          description: Erro no servidor

    put:
      summary: Atualiza um produto existente
      tags: [Produtos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do produto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                categoryId:
                  type: string
                brand:
                  type: string
                model:
                  type: string
                code:
                  type: string
                minStock:
                  type: integer
                  minimum: 0
                purchasePrice:
                  type: number
                  format: float
                  minimum: 0
                salePrice:
                  type: number
                  format: float
                  minimum: 0
                contractPrice:
                  type: number
                  format: float
                  minimum: 0
                location:
                  type: string
                capacity:
                  type: string
                speed:
                  type: string
                interface:
                  type: string
                supplierId:
                  type: string
      responses:
        200:
          description: Produto atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        404:
          description: Produto não encontrado
        500:
          description: Erro no servidor

    delete:
      summary: Remove um produto
      tags: [Produtos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do produto
      responses:
        204:
          description: Produto removido com sucesso
        401:
          description: Não autorizado
        404:
          description: Produto não encontrado
        500:
          description: Erro no servidor

  /items/{id}/adjust:
    post:
      summary: Ajusta o estoque de um produto específico
      tags: [Produtos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do produto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
                - type
              properties:
                quantity:
                  type: integer
                  description: Quantidade a ajustar
                type:
                  type: string
                  enum: [ADD, REMOVE, ADJUST]
                  description: Tipo de ajuste
                reason:
                  type: string
                  description: Motivo do ajuste
      responses:
        200:
          description: Estoque ajustado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Dados inválidos
        401:
          description: Não autorizado
        404:
          description: Produto não encontrado
        500:
          description: Erro no servidor

  /items/{id}/movements:
    get:
      summary: Lista os movimentos de estoque de um produto específico
      tags: [Produtos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do produto
      responses:
        200:
          description: Lista de movimentos retornada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockMovement'
        401:
          description: Não autorizado
        404:
          description: Produto não encontrado
        500:
          description: Erro no servidor

  /items/{id}/image:
    post:
      summary: Faz upload de imagem para um produto
      tags: [Produtos]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID do produto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  format: binary
                  description: Arquivo de imagem
      responses:
        200:
          description: Imagem carregada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  imagePath:
                    type: string
                    description: Caminho da imagem
        400:
          description: Arquivo inválido
        401:
          description: Não autorizado
        404:
          description: Produto não encontrado
        500:
          description: Erro no servidor